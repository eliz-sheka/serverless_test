service: laravel-serveless-test

provider:
    name: aws
    # The AWS region in which to deploy (us-east-1 is the default)
    region: us-east-1
    profile: 211125325981_AdministratorAccess
    # Environment variables
    environment:
        APP_ENV: ${sls:stage}
        APP_KEY: ${ssm:/sandbox/serverless-test/app-key}
        SESSION_DRIVER: cookie
        DB_CONNECTION: mysql
        SQS_QUEUE: ${construct:jobs.queueUrl}
        QUEUE_CONNECTION: sqs
        DB_HOST: !GetAtt MySqlRDSInstance.Endpoint.Address
        DB_PORT: !GetAtt MySqlRDSInstance.Endpoint.Port
        DB_USERNAME: ${ssm:/sandbox/serverless-test/rds-username}
        DB_PASSWORD: ${ssm:/sandbox/serverless-test/rds-password}
        DB_DATABASE: ${ssm:/sandbox/serverless-test/rds-dbname}
        AWS_BUCKET: !Ref ServerlessTestS3Bucket
        FILESYSTEM_DISK: s3
        CUSTOM_AWS_ACCESS_KEY_ID: ${ssm:/sandbox/serverless-test/aws-access-key}
        CUSTOM_AWS_SECRET_ACCESS_KEY: ${ssm:/sandbox/serverless-test/aws-secret-access-key}
        CUSTOM_AWS_DEFAULT_REGION: us-east-1
        SNS_ARN: 'arn:aws:sns:us-east-1:211125325981:UserEvents'
#        AWS_URL: 'arn:aws:s3:::serverless-test-s3-bucket'

    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - 's3:*'
        Resource:
          - !Sub '${ServerlessTestS3Bucket.Arn}' # the storage bucket
          - !Sub '${ServerlessTestS3Bucket.Arn}/*' # and everything inside
      - Effect: "Allow"
        Action:
          - 'sns:*'
        Resource:
          - 'arn:aws:sns:us-east-1:211125325981:UserEvents'


package:
    # Files and directories to exclude from deployment
    patterns:
        - '!node_modules/**'
        - '!public/storage'
        - '!resources/assets/**'
        - '!storage/**'
        - '!tests/**'
        - '!docker/**'
        - '!.env'

functions:

    # This function runs the Laravel website/API
    web:
        handler: public/index.php
        runtime: php-82-fpm
        timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
        events:
            - httpApi: '*'

    # This function lets us run artisan commands in Lambda
    artisan:
        handler: artisan
        runtime: php-82-console
        timeout: 720 # in seconds
        # Uncomment to also run the scheduler every minute
        #events:
        #    - schedule:
        #          rate: rate(1 minute)
        #          input: '"schedule:run"'

resources:
  Resources:
    ServerlessTestS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: serverless-test-s3-bucket
    ServerlessInternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
        Tags:
          - Key: "Name"
            Value: "ServerlessInternetGateway"
    ServerlessVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        InstanceTenancy: default
        Tags:
          - Key: "Name"
            Value: "ServerlessVPC"
    ServerlessVPCGA:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId:
          Ref: ServerlessVPC
        InternetGatewayId:
          Ref: ServerlessInternetGateway
    ServerlessSubnetA:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}a
        CidrBlock: 10.0.0.0/24
        Tags:
          - Key: "Name"
            Value: "ServerlessSubnetA"
    ServerlessSubnetB:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}b
        CidrBlock: 10.0.1.0/24
        Tags:
          - Key: "Name"
            Value: "ServerlessSubnetB"
    ServerlessSubnetC:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::Subnet
      Properties:
        VpcId:
          Ref: ServerlessVPC
        AvailabilityZone: ${self:provider.region}c
        CidrBlock: 10.0.2.0/24
        Tags:
          - Key: "Name"
            Value: "ServerlessSubnetC"
    ServerlessSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: "RDS Subnet Group"
        SubnetIds:
          - Ref: ServerlessSubnetA
          - Ref: ServerlessSubnetB
          - Ref: ServerlessSubnetC
        Tags:
          - Key: "Name"
            Value: "ServerlessSubnetGroup"
    ServerlessSecurityGroup:
      DependsOn: ServerlessVPC
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId:
          Ref: ServerlessVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '0'
            ToPort: '65535'
            CidrIp: "0.0.0.0/0"
        Tags:
          - Key: "Name"
            Value: "ServerlessSecurityGroup"
    RouteTablePublic:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: ServerlessVPC
        Tags:
          - Key: Name
            Value: public-route
    RoutePublic:
      Type: AWS::EC2::Route
      Properties:
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: ServerlessInternetGateway
        RouteTableId:
          Ref: RouteTablePublic
    RouteTableAssociationSubnetA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTablePublic
        SubnetId:
          Ref: ServerlessSubnetA
    RouteTableAssociationSubnetB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTablePublic
        SubnetId:
          Ref: ServerlessSubnetB
    RouteTableAssociationSubnetC:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        RouteTableId:
          Ref: RouteTablePublic
        SubnetId:
          Ref: ServerlessSubnetC

    MySqlRDSInstance:
      DependsOn: ServerlessVPCGA
      Type: AWS::RDS::DBInstance
      Properties:
        MasterUsername: ${ssm:/sandbox/serverless-test/rds-username}
        MasterUserPassword: ${ssm:/sandbox/serverless-test/rds-password}
        AllocatedStorage: 20
        DBName: ${ssm:/sandbox/serverless-test/rds-dbname}
        DBInstanceClass: db.t3.micro
        VPCSecurityGroups:
          - !GetAtt ServerlessSecurityGroup.GroupId
        DBSubnetGroupName:
          Ref: ServerlessSubnetGroup
        Engine: mysql
        PubliclyAccessible: true

    MySNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: UserEvents


constructs:
  jobs:
    type: queue
    worker:
      handler: Bref\LaravelBridge\Queue\QueueHandler
      runtime: php-82
      timeout: 60 # seconds

plugins:
    # We need to include the Bref plugin
    - ./vendor/bref/bref
    - serverless-lift
